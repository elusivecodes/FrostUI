@use "sass:color";
@use "sass:math";

// Generate a color shade
// @param $color
// @param $amount: 500
// @param $invert: false
@function color-shade($color, $amount: 500, $invert: false) {
    @if ($invert) {
        $amount: 1000 - $amount;
    }

    @if ($amount < 500) {
        $amount: 100 - math.div($amount, 5);
        @return tint($color, $amount * 1%);
    } @else if ($amount > 500) {
        $amount: math.div($amount - 500, 5);
        @return shade($color, $amount * 1%);
    } @else {
        @return $color;
    }
}

// Find a text color that meets a minimum contrast ratio.
// @param $background
// @param $foreground: null
// @param $threshold: 4.5
// @param $base: 500
// @param $min: 100
// @param $max: 900
// @param $step-size: 100
@function text-color-contrast($background, $foreground: null, $threshold: 4.5, $base: 500, $min: 100, $max: 900, $step-size: 100) {
    $min-diff: $max - $min;
    $i: $min;
    $result: null;

    @while $i <= $max {
        $temp: color-shade($foreground, $i);
        $diff: math.abs($base - $i);

        @if contrast-ratio($background, $temp) >= $threshold and $diff < $min-diff {
            $result: $temp;
            $min-diff: $diff;
        }

        $i: $i + $step-size;
    }

    @return if($result == null, text-color($background), $result);
}

// Calculate the contrast ratio between two colors.
// @param $background
// @param $foreground
@function contrast-ratio($background, $foreground) {
    $luma1: luma($background);
    $luma2: luma($foreground);

    @return if($luma1 > $luma2, math.div($luma1 + .05, $luma2 + .05), math.div($luma2 + .05, $luma1 + .05));
}

// Fade a color to a specified opacity (0-1).
// @param $color
// @param $amount
@function fade($color, $amount) {
    @return fade-out(fade-in($color, 1), 1 - $amount);
}

// Calculate the relative luminance of a color.
// @param color
@function luma($color) {
    $rgb: (r: color.red($color),
    g: color.green($color),
    b: color.blue($color));

    @each $name,
        $value in $rgb {
        $value: math.div($value, 255);
        $value: if($value < .04045, math.div($value, 12.92), math.pow((math.div($value + .055, 1.055)), 2.4));
        $rgb: map-merge($rgb, ($name: $value));
    }

    @return (map-get($rgb, "r") * .2126) + (map-get($rgb, "g") * .7152) + (map-get($rgb, "b") * .0722);
}

// Shade a color by a specified amount (1-100).
// @param $color
// @param $amount
@function shade($color, $amount) {
    @return mix($color, #000, 100 - $amount);
}

// Choose the best text color for a background.
// @param $background
// @param $foreground1: #fff
// @param $foreground2: #fff
// @param $threshold: 4.5
@function text-color($background, $foreground1: #fff, $foreground2: #000, $threshold: 4.5) {
    @return if(contrast-ratio($background, $foreground1) > $threshold, $foreground1, $foreground2);
}

// Tint a color by a specified amount (1-100).
// @param $color
// @param $amount
@function tint($color, $amount) {
    @return mix($color, #fff, 100 - $amount);
}

// Convert a color to RGB values
// @param $color
@function to-rgb($color) {
    @return color.red($color),
        color.green($color),
        color.blue($color);
}
